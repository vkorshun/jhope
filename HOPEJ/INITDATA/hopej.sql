SET SQL DIALECT 3;
SET NAMES WIN1251;
SET CLIENTLIB 'C:\Firebird_3_32\fbclient.dll';
CREATE DATABASE 'D:\FBDATA\hopej.fdb'
  USER 'sysdba' PASSWORD 'masterkey'
  PAGE_SIZE 16384
  DEFAULT CHARACTER SET UTF8 COLLATION PXW_CYRL;
 
/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN TBLOB AS
BLOB SUB_TYPE 0 SEGMENT SIZE 80;

CREATE DOMAIN TID AS
BIGINT
NOT NULL;

CREATE DOMAIN TNAME AS
VARCHAR(100);

CREATE DOMAIN TNAME40 AS
VARCHAR(40);

CREATE DOMAIN TSTRING AS
VARCHAR(250);


/******************************************************************************/
/***                            Package Headers                             ***/
/******************************************************************************/



SET TERM ^ ; 

CREATE PACKAGE PKG_COMMON
AS
BEGIN
  FUNCTION YearMonth(d  DATE) returns CHAR(6);
  FUNCTION GetAttributeCType(AID BIGINT) returns  VARCHAR(3);
  FUNCTION GetAttributeTypeName(AID BIGINT) returns  VARCHAR(20);
  FUNCTION IsUserAdmin(AUserId BIGINT) returns BOOLEAN;
END^



SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ATTRIBUTELIST (
    ID             INTEGER,
    IDATTRIBUTE    TID,
    NAME           TNAME,
    ATTRIBUTETYPE  TID,
    NLEN           SMALLINT DEFAULT 10,
    NDEC           SMALLINT DEFAULT 0,
    IDGROUP        BIGINT,
    ISUNIQUE       BOOLEAN,
    NOTEMPTY       BOOLEAN
);

CREATE TABLE ATTRIBUTESOFGROUP (
    IDGROUP        TID,
    IDATTRIBUTE    TID,
    ISONFULLGROUP  BOOLEAN DEFAULt FALSE,
    NUMBEREDIT     INTEGER,
    NUMBERVIEW     INTEGER,
    ISHIDDEN       BOOLEAN
);

CREATE TABLE ATTRIBUTESOFOBJECT (
    IDOBJECT     TID,
    IDATTRIBUTE  TID,
    VAL          TSTRING,
    V_INT        INTEGER,
    V_DOUBLE     DOUBLE PRECISION,
    V_CURRENCY   NUMERIC(15,2),
    V_DATA       DATE,
    V_BOOLEAN    BOOLEAN,
    V_BLOB       TBLOB
);

CREATE TABLE ATTRIBUTETYPELIST (
    IDTYPEATTRIBUTE  TID NOT NULL,
    NAME             TNAME40,
    CTYPE            VARCHAR(3)
);

CREATE TABLE MENULIST (
    IDMENU  TID ,
    NAME    TNAME40
);

CREATE TABLE OBJECTS (
    IDGROUP   TID,
    IDOBJECT  TID,
    NAME      TNAME,
    ISGROUP   BOOLEAN
);

CREATE TABLE USERSGROUP (
    IDGROUP   TID,
    NAME      TNAME,
    ROLENAME  VARCHAR(60),
    USERNAME  VARCHAR(60),
    IDMENU    BIGINT
);

CREATE TABLE USERSLIST (
    IDGROUP           TID,
    IDUSER            TID,
    USERNAME          VARCHAR(60),
    DESCRIPTION       VARCHAR(60),
    IDOBJECT          BIGINT,
    IDENTERPRIZE      TID,
    USERPASSWORD      CHAR(20) CHARACTER SET NONE,
    REQUIREDPASSWORD  BOOLEAN
);

INSERT INTO MENULIST (IDMENU, NAME) VALUES (1, 'Админы');


INSERT INTO USERSGROUP (IDGROUP, NAME, ROLENAME, USERNAME, IDMENU) VALUES (1, 'Админы', NULL, NULL, 1);


INSERT INTO USERSLIST (IDGROUP, IDUSER, USERNAME, DESCRIPTION, IDOBJECT, IDENTERPRIZE, USERPASSWORD) VALUES (1, 1, 'ADMIN', 'Администратор', 0, 0, '2296235330019832768 ');




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE ATTRIBUTELIST ADD CONSTRAINT PK_ATTRIBUTELIST PRIMARY KEY (IDATTRIBUTE);
ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT PK_ATTRIBUTESOFGROUP PRIMARY KEY (IDGROUP, IDATTRIBUTE);
ALTER TABLE ATTRIBUTESOFOBJECT ADD CONSTRAINT PK_ATTRIBUTESOFOBJECT PRIMARY KEY (IDOBJECT, IDATTRIBUTE);
ALTER TABLE ATTRIBUTETYPELIST ADD PRIMARY KEY (IDTYPEATTRIBUTE);
ALTER TABLE MENULIST ADD CONSTRAINT PK_MENULIST PRIMARY KEY (IDMENU);
ALTER TABLE OBJECTS ADD CONSTRAINT PK_OBJECTS_IDOBJECT PRIMARY KEY (IDOBJECT);
ALTER TABLE USERSGROUP ADD CONSTRAINT PK_USERSGROUP PRIMARY KEY (IDGROUP);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT FK_ATTRIBUTESOFGROUP_IDGROUP FOREIGN KEY (IDGROUP) REFERENCES OBJECTS (IDOBJECT);
ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT FK_ATTRIBUTESOFGROUP_IDATTR FOREIGN KEY (IDATTRIBUTE) REFERENCES ATTRIBUTELIST(IDATTRIBUTE);
ALTER TABLE ATTRIBUTESOFOBJECT ADD CONSTRAINT FK_ATTRIBUTESOFOBJECT_IDOBJECT FOREIGN KEY (IDOBJECT) REFERENCES OBJECTS (IDOBJECT)
  USING INDEX IX_ATTRIBUTESOFOBJECT_IDOBJECT;
ALTER TABLE USERSGROUP ADD CONSTRAINT FK_USERSGROUP_IDMENU FOREIGN KEY (IDMENU) REFERENCES MENULIST (IDMENU)
  USING INDEX IX_USERSGROUP_IDMENU;
ALTER TABLE USERSLIST ADD CONSTRAINT FK_USERSGROUP_IDGROUP FOREIGN KEY (IDGROUP) REFERENCES USERSGROUP(IDGROUP);


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX IX_ATTRIBUTESOFGROUP_IDGROUP ON ATTRIBUTESOFGROUP (IDGROUP,NUMBEREDIT);
CREATE INDEX IX_OBJECTS_IDGROUP ON OBJECTS (IDGROUP);
CREATE INDEX IX_OBJECTS_NAME ON OBJECTS (NAME);
CREATE INDEX IX_OBJECTS_NAME2 ON OBJECTS (IDGROUP, NAME);
CREATE INDEX IX_OBJECTS_ISGROUP ON OBJECTS (ISGROUP,IDGROUP,IDOBJECT);

CREATE INDEX IX_ATTRIBUTESOFOBJECT_V_INT ON ATTRIBUTESOFOBJECT (V_INT,IDATTRIBUTE);
CREATE INDEX IX_ATTRIBUTESOFOBJECT_V_DOUBLE ON ATTRIBUTESOFOBJECT(V_DOUBLE,IDATTRIBUTE);
CREATE INDEX IX_ATTRIBUTESOFOBJECT_V_DATA ON ATTRIBUTESOFOBJECT(V_DATA,IDATTRIBUTE);
CREATE INDEX IX_ATTRIBUTESOFOBJECT_V_CURR ON ATTRIBUTESOFOBJECT(V_CURRENCY,IDATTRIBUTE);
CREATE INDEX IX_ATTRIBUTESOFOBJECT_VAL ON ATTRIBUTESOFOBJECT(VAL,IDATTRIBUTE);

/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: ATTRIBUTESOFOBJECT_BIU0 */
CREATE TRIGGER ATTRIBUTESOFOBJECT_BIU0 FOR ATTRIBUTESOFOBJECT
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
DECLARE vtype INTEGER;
DECLARE voldtype INTEGER;
declare variable  cnewtype VARCHAR(3);
declare variable  coldtype VARCHAR(3);
begin
  /* Trigger text */
    IF ((NEW.val is null) AND updating) THEN
      NEW.val=OLD.val;
    SELECT attributetype FROM ATTRIBUTELIST WHERE idattribute=OLD.idattribute INTO :voldtype;
    SELECT attributetype FROM ATTRIBUTELIST WHERE idattribute=NEW.idattribute INTO :vtype;
    cnewtype = pkg_common.GetAttributeCType(vtype);
    --EXECUTE PROCEDURE get_paramtype(:vtype) RETURNING_VALUES :cnewtype;
    IF (UPDATING) THEN
      coldtype = pkg_common.GetAttributeCType(voldtype);
      --EXECUTE PROCEDURE get_paramtype(:voldtype) RETURNING_VALUES :coldtype;
    IF (UPDATING and voldtype <> vtype) then
    BEGIN
      IF (coldtype IN ('N','V','TS','T')) then
        NEW.v_double = null;
      IF (coldtype='D') then
        NEW.v_data = null;
      IF (coldtype='L') then
        NEW.v_boolean = null;
      IF (coldtype='M') then
        NEW.v_currency = null;
      IF (coldtype IN ('A','O','G','I')) then
        NEW.v_int = null;
    END
    IF (cnewtype  IN ('N','V','TS','T')) then
      IF (NEW.val<>'') then
      BEGIN
         NEW.v_double = CAST(COALESCE(NEW.val,0) As DOUBLE PRECISION);
      END
      ELSE
         NEW.v_double = 0;

    IF ((cnewtype='D') ) then
      IF ( (NEW.val<>'  .  .  ') and (NEW.val<>'.  .')) then
         NEW.v_data = CAST(NEW.val AS DATE) ;
      ELSE
         NEW.v_data = null;

    IF (cnewtype='L') then
      IF (NEW.VAL ='') THEN
           NEW.v_boolean = false;
      ELSE
        NEW.v_boolean = CAST(COALESCE(NEW.val,0) AS BOOLEAN);

    IF (cnewtype='M') then
      IF (NEW.VAL ='') THEN
           NEW.v_currency = 0;
      ELSE
        NEW.v_currency = CAST(COALESCE(NEW.val,0) AS NUMERIC(15,2));

    IF (cnewtype IN ('A','O','G','I')) THEN
      IF (NEW.VAL ='') THEN
        NEW.v_int = 0;
      ELSE
        NEW.v_int = CAST(COALESCE(NEW.val,0) AS INTEGER);
END
^

SET TERM ; ^



/******************************************************************************/
/***                             Package Bodies                             ***/
/******************************************************************************/



SET TERM ^ ; 

CREATE PACKAGE BODY PKG_COMMON
AS
BEGIN

  FUNCTION YearMonth(d  DATE) returns CHAR(6)
  AS
    declare variable  yy smallint;
    declare variable mm smallint;
    declare variable dd smallint;
    declare variable cym char(2);
  BEGIN
    yy = EXTRACT( year FROM d);
    mm = EXTRACT( month FROM d);
    if (mm<10) then
    begin
      cym = '0' || mm ;
    end
    else
      cym = '' || mm;
    RETURN yy || cym;
  END

  FUNCTION GetAttributeCType(AID BIGINT) returns  VARCHAR(3)
  AS
    DECLARE VARIABLE vctype VARCHAR(3);
  BEGIN
    SELECT ctype FROM ATTRIBUTETYPELIST WHERE idtypeattribute = :AID INTO :vctype;
    RETURN TRIM(vctype);
  END

  FUNCTION GetAttributeTypeName(AID BIGINT) returns  VARCHAR(20)
  AS
    DECLARE VARIABLE vtypename VARCHAR(20);
  BEGIN
    SELECT name FROM ATTRIBUTETYPELIST WHERE idtypeattribute = :AID INTO :vtypename;
    RETURN TRIM(vtypename);
  END


  FUNCTION IsUserAdmin(AUserId BIGINT) returns BOOLEAN
  AS
    DECLARE VARIABLE VIDGROUP BIGINT;
  BEGIN
    SELECT idgroup FROM userslist WHERE iduser=:AUserId INTO :VIDGROUP;
    RETURN (VIDGROUP = 1);
  END
END^


SET TERM ; ^



/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

CREATE ROLE RHOPE;


/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT SELECT ON RDB$FORMATS TO  "PUBLIC";
GRANT SELECT ON RDB$PAGES TO  "PUBLIC";
GRANT SELECT ON RDB$ROLES TO  "PUBLIC";
GRANT RHOPE TO  TASK;

/* Privileges of roles */
GRANT ALL ON ATTRIBUTELIST TO  RHOPE;
GRANT ALL ON ATTRIBUTESOFGROUP TO  RHOPE;
GRANT ALL ON ATTRIBUTESOFOBJECT TO  RHOPE;
GRANT ALL ON ATTRIBUTETYPELIST TO  RHOPE;
GRANT ALL ON MENULIST TO  RHOPE;
GRANT ALL ON OBJECTS TO  RHOPE;
GRANT ALL ON USERSGROUP TO  RHOPE;
GRANT ALL ON USERSLIST TO  RHOPE;
GRANT EXECUTE ON PACKAGE PKG_COMMON TO  RHOPE;

INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (0, 1, 'Объекты количественного учета', True);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (0, 3, 'Денежные еденицы', True);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (0, 4, 'Системные', True);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (3, 10, 'грн.', False);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (3, 46, 'USD', False);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (3, 161, 'EUR', False);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (3, 162, 'руб.', False);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (0, 2, '1.Объекты аналитического учета', True);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (1, 203, 'Тест1', True);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (1, 202, 'Тест2', True);
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME, ISGROUP) VALUES (203, 201, 'Тест3', True);


INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (0,'Строка','C');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (1,'Число','N');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (2,'Дата','D');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (3,'Логика','L');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (4,'Дата&Время','TS');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (5,'Время','T');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (6,'Объект','O');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (7,'Группа','G');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (8,'Валюта','O');
INSERT INTO ATTRIBUTETYPELIST(IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (9,'Сумма в валюте','M');

CREATE SEQUENCE IDATTRIBUTE;
ALTER SEQUENCE IDATTRIBUTE RESTART WITH 0;

CREATE SEQUENCE IDOBJECT;
ALTER SEQUENCE IDOBJECT RESTART WITH 210;

CREATE TABLE ATTRIBUTESET (
  IDSET TID,
  NAME  TNAME,
  CONSTRAINT PK_ATTRIBUTESET PRIMARY KEY(IDSET));
CREATE INDEX IX_ATTRIBUTESET_NAME ON ATTRIBUTESET (NAME);


CREATE TABLE ATTRIBUTESETSOFGROUP (
  IDGROUP TID,
  IDSET TID,
  IDORDER  INTEGER,
  CONSTRAINT PK_ATTRIBUTESETSOFGROUP PRIMARY KEY(IDGROUP,IDSET));

ALTER TABLE ATTRIBUTESOFGROUP ADD IDSET TID;
ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT FK_ATTRIBUTESOFGROUP_IDSET FOREIGN KEY (IDSET) REFERENCES ATTRIBUTESET(IDSET);

INSERT INTO ATTRIBUTESET(IDSET, NAME) VALUES (0,'Основные атрибуты');

CREATE SEQUENCE IDATTRIBUTESET;
ALTER SEQUENCE IDATTRIBUTESET RESTART WITH 0;

GRANT ALL ON ATTRIBUTESET TO  RHOPE;
GRANT ALL ON ATTRIBUTESETSOFGROUP TO  RHOPE;

CREATE TABLE USERSACCESSTYPE(
  IDUATYPE TID ,
  NAME TNAME, 
  CONSTNAME TNAME,
  CONSTRAINT PK_USERSACCESSTYPE PRIMARY KEY (IDUATYPE));


CREATE TABLE USERSACCESSVALUES(
   IDUAVALUE TID, 
   NAME TNAME, 
   CONSTNAME TNAME,
   CONSTRAINT PK_USERSACCESSVALUE PRIMARY KEY (IDUAVALUE));

INSERT INTO USERSACCESSTYPE (IDUATYPE, NAME,  CONSTNAME) VALUES(1,'Объекты учета','USERACCESS_OBJECTS');
INSERT INTO USERSACCESSTYPE (IDUATYPE, NAME,  CONSTNAME) VALUES(2,'Атрибуты','USERACCESS_ATTRIBUTES');

INSERT INTO USERSACCESSVALUES (IDUAVALUE, NAME, CONSTNAME) VALUES(0,'Доступ запрещен','ACCESS_DENIDE');
INSERT INTO USERSACCESSVALUES (IDUAVALUE, NAME, CONSTNAME) VALUES(1,'Тоько чтение','ACCESS_READONLY');
INSERT INTO USERSACCESSVALUES (IDUAVALUE, NAME, CONSTNAME) VALUES(2,'Редактирование','ACCESS_EDIT');
INSERT INTO USERSACCESSVALUES (IDUAVALUE, NAME, CONSTNAME) VALUES(3,'Выполнение','ACCESS_EXECUTE');


GRANT ALL ON USERSACCESSTYPE TO  RHOPE;
GRANT ALL ON USERSACCESSVALUES TO  RHOPE;

INSERT INTO ATTRIBUTELIST (ID, IDATTRIBUTE, NAME, ATTRIBUTETYPE, NLEN, NDEC, IDGROUP) VALUES (1, 1, 'Ширина (мм)', 1, 15, 2, 0);
INSERT INTO ATTRIBUTELIST (ID, IDATTRIBUTE, NAME, ATTRIBUTETYPE, NLEN, NDEC, IDGROUP) VALUES (1, 2, 'Длина (мм)', 1, 15, 2, 0);
INSERT INTO ATTRIBUTELIST (ID, IDATTRIBUTE, NAME, ATTRIBUTETYPE, NLEN, NDEC, IDGROUP) VALUES (2, 4, 'Контактный телефон', 0, 10, 0, 0);
INSERT INTO ATTRIBUTELIST (ID, IDATTRIBUTE, NAME, ATTRIBUTETYPE, NLEN, NDEC, IDGROUP) VALUES (2, 5, 'Должность', 6, 4, 0, 0);
INSERT INTO ATTRIBUTELIST (ID, IDATTRIBUTE, NAME, ATTRIBUTETYPE, NLEN, NDEC, IDGROUP) VALUES (2, 6, 'Адрес', 0, 100, 0, 0);

INSERT INTO ATTRIBUTESET (IDSET, NAME) VALUES (1, 'Доп. информация');


INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (2, 211, 'Покупатели');


INSERT INTO ATTRIBUTESOFGROUP (IDGROUP, IDATTRIBUTE, NUMBEREDIT, NUMBERVIEW, IDSET) VALUES (202, 1, 1, 1, 0);
INSERT INTO ATTRIBUTESOFGROUP (IDGROUP, IDATTRIBUTE, NUMBEREDIT, NUMBERVIEW, IDSET) VALUES (202, 2, 2, 2, 0);
INSERT INTO ATTRIBUTESOFGROUP (IDGROUP, IDATTRIBUTE, NUMBEREDIT, NUMBERVIEW, IDSET) VALUES (211, 4, 1, 1, 0);
INSERT INTO ATTRIBUTESOFGROUP (IDGROUP, IDATTRIBUTE, NUMBEREDIT, NUMBERVIEW, IDSET) VALUES (211, 6, 2, 2, 1);



CREATE TABLE USERSACCESS( IDUSER TID,
  IDUATYPE TID,
  IDITEM   TID,
  IDUAVALUE TID,
  CONSTRAINT PK_USERSACCESS PRIMARY KEY ( IDUSER, IDUATYPE, IDITEM),
  CONSTRAINT FK_USERSACCESS_IDUATYPE FOREIGN KEY (IDUATYPE) REFERENCES USERSACCESSTYPE(IDUATYPE),
  CONSTRAINT FK_USERSACCESS_IDVALUE FOREIGN KEY (IDUATYPE) REFERENCES USERSACCESSVALUES(IDUAVALUE));

GRANT ALL ON USERSACCESS TO  RHOPE;

SELECT  GEN_ID(IDATTRIBUTE, (SELECT MAX(IDATTRIBUTE) FROM attributeLIST)-GEN_ID(IDATTRIBUTE,0)) FROM RDB$DATABASE;
SELECT  GEN_ID(IDATTRIBUTE, (SELECT MAX(IDATTRIBUTE) FROM attributeLIST)-GEN_ID(IDATTRIBUTE,0)) FROM RDB$DATABASE;
SELECT  GEN_ID(IDATTRIBUTESET, (SELECT MAX(IDSET) FROM ATTRIBUTESET)-GEN_ID(IDATTRIBUTESET,0)) FROM RDB$DATABASE;
