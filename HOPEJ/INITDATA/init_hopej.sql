/******************************************************************************/
/***         Generated by IBExpert 2014.10.6.1 18.10.2014 18:56:00          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1251;

SET CLIENTLIB 'C:\Firebird_3_32\fbclient.dll';

CREATE DATABASE 'VKLATITUDE/3050:D:\FBDATA\hopej.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1251 COLLATION WIN1251;



/******************************************************************************/
/***                                Domains                                 ***/
/******************************************************************************/

CREATE DOMAIN TBLOB AS
BLOB SUB_TYPE 0 SEGMENT SIZE 80;

CREATE DOMAIN TID AS
INTEGER
NOT NULL;

CREATE DOMAIN TNAME AS
VARCHAR(100);

CREATE DOMAIN TNAME40 AS
VARCHAR(40);



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR IDATTRIBUTE START WITH 0 INCREMENT BY 1;
SET GENERATOR IDATTRIBUTE TO 5;

CREATE GENERATOR IDOBJECT START WITH 0 INCREMENT BY 1;
SET GENERATOR IDOBJECT TO 240;



/******************************************************************************/
/***                            Package headers                             ***/
/******************************************************************************/



SET TERM ^ ; 

CREATE PACKAGE PKG_COMMON
AS
BEGIN
  FUNCTION YearMonth(d  DATE) returns CHAR(6);
  FUNCTION GetAttributeCType(AID INTEGER) returns  VARCHAR(3);
  FUNCTION GetAttributeTypeName(AID INTEGER) returns  VARCHAR(20);
END^



SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE ATTRIBUTELIST (
    ID             INTEGER,
    IDATTRIBUTE    TID,
    NAME           TNAME,
    ATTRIBUTETYPE  TID,
    NLEN           SMALLINT DEFAULT 10,
    NDEC           SMALLINT DEFAULT 0,
    KODG           INTEGER,
    ISUNIQUE       BOOLEAN,
    NOTEMPTY       BOOLEAN
);

CREATE TABLE ATTRIBUTESET (
    IDSET  TID NOT NULL,
    NAME   TNAME
);

CREATE TABLE ATTRIBUTESETSOFGROUP (
    IDGROUP  TID NOT NULL,
    IDSET    TID NOT NULL,
    IDORDER  INTEGER
);

CREATE TABLE ATTRIBUTESOFGROUP (
    IDGROUP        TID,
    IDATTRIBUTE    TID,
    ISONFULLGROUP  BOOLEAN DEFAULt FALSE,
    NUMBERORD      CHAR(2),
    NUMBERVIEW     INTEGER,
    ISHIDDEN       BOOLEAN,
    IDSET          TID
);

CREATE TABLE ATTRIBUTESOFOBJECT (
    IDOBJECT     TID,
    IDATTRIBUTE  TID,
    VAL          TNAME,
    V_INT        INTEGER,
    V_DOUBLE     DOUBLE PRECISION,
    V_DATA       DATE,
    V_BOOLEAN    BOOLEAN,
    V_BLOB       TBLOB
);

CREATE TABLE ATTRIBUTETYPELIST (
    IDTYPEATTRIBUTE  TID NOT NULL,
    NAME             TNAME40,
    CTYPE            VARCHAR(3)
);

CREATE TABLE MENULIST (
    IDMENU  TID NOT NULL,
    NAME    TNAME40
);

CREATE TABLE OBJECTS (
    IDGROUP   TID,
    IDOBJECT  TID,
    NAME      TNAME,
    ISGROUP   BOOLEAN
);

CREATE TABLE USERSGROUP (
    IDGROUP   INTEGER NOT NULL,
    NAME      TNAME,
    ROLENAME  VARCHAR(60),
    USERNAME  VARCHAR(60),
    IDMENU    INTEGER
);

CREATE TABLE USERSLIST (
    IDGROUP           INTEGER NOT NULL,
    IDUSER            TID,
    USERNAME          VARCHAR(60),
    DESCRIPTION       VARCHAR(60),
    KODOBJ            INTEGER,
    IDENTERPRIZE      TID,
    USERPASSWORD      CHAR(20) CHARACTER SET NONE,
    REQUIREDPASSWORD  BOOLEAN
);

INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (0, 1, 'Объекты количественного учета');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (0, 3, 'Денежные еденицы');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (0, 4, 'Системные');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (3, 10, 'грн.');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (3, 46, 'USD');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (3, 161, 'EUR');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (3, 162, 'руб.');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (0, 2, '1.Объекты аналитического учета');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (0, 236, '4444111');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (1, 202, 'Тест2');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (1, 237, '4444333');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (232, 238, 'Первый');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (2, 214, '000');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (232, 239, '222');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (237, 240, '44444');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (214, 228, '1111');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (1, 232, '2222');
INSERT INTO OBJECTS (IDGROUP, IDOBJECT, NAME) VALUES (1, 235, '4444');

COMMIT WORK;

INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (0, 'Строка', 'C');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (1, 'Число', 'N');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (2, 'Дата', 'D');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (3, 'Логика', 'L');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (4, 'Дата', 'TS');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (5, 'Время', 'T');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (6, 'Объект', 'O');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (7, 'Группа', 'G');
INSERT INTO ATTRIBUTETYPELIST (IDTYPEATTRIBUTE, NAME, CTYPE) VALUES (8, 'Валюта', 'O');

COMMIT WORK;

INSERT INTO MENULIST (IDMENU, NAME) VALUES (1, 'Админы');

COMMIT WORK;

INSERT INTO USERSGROUP (IDGROUP, NAME, ROLENAME, USERNAME, IDMENU) VALUES (1, 'Админы', NULL, NULL, 1);

COMMIT WORK;

INSERT INTO USERSLIST (IDGROUP, IDUSER, USERNAME, DESCRIPTION, KODOBJ, IDENTERPRIZE, USERPASSWORD) VALUES (1, 1, 'ADMIN', 'Администратор', 0, 0, '2296235330019832768 ');

COMMIT WORK;



/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE ATTRIBUTELIST ADD CONSTRAINT PK_ATTRIBUTELIST PRIMARY KEY (IDATTRIBUTE);
ALTER TABLE ATTRIBUTESET ADD CONSTRAINT PK_ATTRIBUTESET PRIMARY KEY (IDSET);
ALTER TABLE ATTRIBUTESETSOFGROUP ADD CONSTRAINT PK_ATTRIBUTESETSOFGROUP PRIMARY KEY (IDGROUP, IDSET);
ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT PK_ATTRIBUTESOFGROUP PRIMARY KEY (IDGROUP, IDATTRIBUTE);
ALTER TABLE ATTRIBUTESOFOBJECT ADD CONSTRAINT PK_ATTRIBUTESOFOBJECT PRIMARY KEY (IDOBJECT, IDATTRIBUTE);
ALTER TABLE ATTRIBUTETYPELIST ADD PRIMARY KEY (IDTYPEATTRIBUTE);
ALTER TABLE MENULIST ADD CONSTRAINT PK_MENULIST PRIMARY KEY (IDMENU);
ALTER TABLE OBJECTS ADD CONSTRAINT PK_OBJECTS_IDOBJECT PRIMARY KEY (IDOBJECT);
ALTER TABLE USERSGROUP ADD CONSTRAINT PK_USERSGROUP PRIMARY KEY (IDGROUP);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT FK_ATTRIBUTESOFGROUP_IDGROUP FOREIGN KEY (IDGROUP) REFERENCES OBJECTS (IDOBJECT);
ALTER TABLE ATTRIBUTESOFGROUP ADD CONSTRAINT FK_ATTRIBUTESOFGROUP_IDSET FOREIGN KEY (IDSET) REFERENCES ATTRIBUTESET (IDSET);
ALTER TABLE ATTRIBUTESOFOBJECT ADD CONSTRAINT FK_ATTRIBUTESOFOBJECT_IDOBJECT FOREIGN KEY (IDOBJECT) REFERENCES OBJECTS (IDOBJECT)
  USING INDEX IX_ATTRIBUTESOFOBJECT_IDOBJECT;
ALTER TABLE USERSGROUP ADD CONSTRAINT FK_USERSGROUP_IDMENU FOREIGN KEY (IDMENU) REFERENCES MENULIST (IDMENU)
  USING INDEX IX_USERSGROUP_IDMENU;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE INDEX IX_ATTRIBUTESOFGROUP_IDGROUP ON ATTRIBUTESOFGROUP (IDGROUP, NUMBERORD);
CREATE INDEX IX_OBJECTS_IDGROUP ON OBJECTS (IDGROUP);
CREATE INDEX IX_OBJECTS_ISGROUP ON OBJECTS (ISGROUP, IDGROUP, IDOBJECT);
CREATE INDEX IX_OBJECTS_NAME ON OBJECTS (NAME);
CREATE INDEX IX_OBJECTS_NAME2 ON OBJECTS (IDGROUP, NAME);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: ATTRIBUTESOFOBJECT_BIU0 */
CREATE TRIGGER ATTRIBUTESOFOBJECT_BIU0 FOR ATTRIBUTESOFOBJECT
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
DECLARE vtype INTEGER;
DECLARE voldtype INTEGER;
declare variable  cnewtype CHAR(1);
declare variable  coldtype CHAR(1);
begin
  /* Trigger text */
    IF ((NEW.val is null) AND updating) THEN
      NEW.val=OLD.val;
    SELECT attributetype FROM ATTRIBUTELIST WHERE idattribute=OLD.idattribute INTO :voldtype;
    SELECT attributetype FROM ATTRIBUTELIST WHERE idattribute=NEW.idattribute INTO :vtype;
    cnewtype = pkg_common.GetAttributeCType(vtype);
    --EXECUTE PROCEDURE get_paramtype(:vtype) RETURNING_VALUES :cnewtype;
    IF (UPDATING) THEN
      coldtype = pkg_common.GetAttributeCType(voldtype);
      --EXECUTE PROCEDURE get_paramtype(:voldtype) RETURNING_VALUES :coldtype;
    IF (UPDATING and voldtype <> vtype) then
    BEGIN
      IF (coldtype IN ('N','V')) then
        NEW.v_double = null;
      IF (coldtype='D') then
        NEW.v_data = null;
      IF (coldtype='L') then
        NEW.v_boolean = null;
      IF (coldtype IN ('A','O','G','L','I')) then
        NEW.v_int = null;
    END
    IF (cnewtype  IN ('N','V')) then
      IF (NEW.val<>'') then
      BEGIN
         NEW.v_double = CAST(COALESCE(NEW.val,0) As DOUBLE PRECISION);
      END
      ELSE
         NEW.v_double = 0;

    IF ((cnewtype='D') ) then
      IF ( (NEW.val<>'  .  .  ') and (NEW.val<>'.  .')) then
         NEW.v_data = CAST(NEW.val AS DATE) ;
      ELSE
         NEW.v_data = null;

    IF (coldtype='L') then
      IF (NEW.VAL ='') THEN
           NEW.v_boolean = false;
      ELSE
        NEW.v_boolean = CAST(COALESCE(NEW.val,0) AS BOOLEAN);

    IF (cnewtype IN ('A','O','G','I')) THEN
      IF (NEW.VAL ='') THEN
        NEW.v_int = 0;
      ELSE
        NEW.v_int = CAST(COALESCE(NEW.val,0) AS INTEGER);
END
^

SET TERM ; ^



/******************************************************************************/
/***                             Package bodies                             ***/
/******************************************************************************/



SET TERM ^ ; 

CREATE PACKAGE BODY PKG_COMMON
AS
BEGIN

  FUNCTION YearMonth(d  DATE) returns CHAR(6)
  AS
    declare variable  yy smallint;
    declare variable mm smallint;
    declare variable dd smallint;
    declare variable cym char(2);
  BEGIN
    yy = EXTRACT( year FROM d);
    mm = EXTRACT( month FROM d);
    if (mm<10) then
    begin
      cym = '0' || mm ;
    end
    else
      cym = '' || mm;
    RETURN yy || cym;
  END

  FUNCTION GetAttributeCType(AID INTEGER) returns  VARCHAR(3)
  AS
    DECLARE VARIABLE vctype VARCHAR(3);
  BEGIN
    SELECT ctype FROM ATTRIBUTETYPELIST WHERE idtypeattribute = :AID INTO :vctype;
    RETURN TRIM(vctype);
  END

  FUNCTION GetAttributeTypeName(AID INTEGER) returns  VARCHAR(20)
  AS
    DECLARE VARIABLE vtypename VARCHAR(20);
  BEGIN
    SELECT name FROM ATTRIBUTETYPELIST WHERE idtypeattribute = :AID INTO :vtypename;
    RETURN TRIM(vtypename);
  END

END^



SET TERM ; ^



/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

CREATE ROLE RHOPE;


/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT SELECT ON RDB$FORMATS TO PUBLIC;
GRANT SELECT ON RDB$PAGES TO PUBLIC;
GRANT SELECT ON RDB$ROLES TO PUBLIC;
GRANT RHOPE TO TASK;

/* Privileges of roles */
GRANT ALL ON ATTRIBUTELIST TO RHOPE;
GRANT ALL ON ATTRIBUTESOFGROUP TO RHOPE;
GRANT ALL ON ATTRIBUTESOFOBJECT TO RHOPE;
GRANT ALL ON ATTRIBUTETYPELIST TO RHOPE;
GRANT ALL ON MENULIST TO RHOPE;
GRANT ALL ON OBJECTS TO RHOPE;
GRANT ALL ON USERSGROUP TO RHOPE;
GRANT ALL ON USERSLIST TO RHOPE;
GRANT EXECUTE ON PACKAGE PKG_COMMON TO RHOPE;

  